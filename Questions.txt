
Divide an array into K subarray with the given condition

Given an array arr[] and an integer K. The task is to divide the array into K parts ( subarray ) such that the sum of the values of all subarray is minimum.

The value of every subarray is defined as:

    Take the maximum from that subarray.
    Subtract each element of the subarray with the maximum.
    Take the sum of all the values after subtraction.

The task is to minimize the sum of the values after dividing the array into K parts.

Examples:

    Input: arr[] = { 2, 9, 5, 4, 8, 3, 6 }, K = 2
    Output: 19
    Explanation:
    The two groups are : {2} with max = 2 and {9, 5, 4, 8, 3, 6} with max=9,
    sum of difference of first group = 2 – 2 = 0,
    sum of difference of second group = (9-9) + (9-5) + (9-4) + (9-8) + (9-3) + (9-6) = 19

    Input: arr[] = { 12, 20, 30, 14, 25}, K = 3
    Output: 19 
	
	
	

Maximum number of given operations to remove the entire string

Given a string str containing lowercase English characters, we can perform the following two operations on the given string:

    Remove the entire string.
    Remove a prefix of the string str[0…i] only if it is equal to the sub-string str[(i + 1)…(2 * i + 1)].

The task is to find the maximum number of operations required to delete the entire string.

Examples:

    Input: str = “abababab”
    Output: 4
    Operation 1: Delete prefix “ab” and the string becomes “ababab”.
    Operation 2: Delete prefix “ab” and the string becomes “abab”.
    Operation 3: Delete prefix “ab”, str = “ab”.
    Operation 4: Delete the entire string.

    Input: s = “abc”
    Output: 1 
	
	

Maximum sum combination from two arrays

Given two arrays arr1[] and arr2[] each of size N. The task is to choose some elements from both the arrays such that no two elements have the same index and no two consecutive numbers can be selected from a single array. Find the maximum sum possible of above-chosen numbers.

Examples:

    Input : arr1[] = {9, 3, 5, 7, 3}, arr2[] = {5, 8, 1, 4, 5}
    Output : 29
    Select first, third and fivth element from the first array.
    Select the second and fourth element from the second array.

    Input : arr1[] = {1, 2, 9}, arr2[] = {10, 1, 1}
    Output : 19
    Select last element from the first array and first element from the second array. 
	
	

Alternate XOR operations on sorted array

Given an array arr[] and two integers X and K. The task is to perform the following operation on array K times:

    Sort the array.
    XOR every alternate element of the sorted array with X i.e. arr[0], arr[2], arr[4], …

After repeating the above steps K times, print the maximum and the minimum element in the modified array.

Examples:

    Input: arr[] = {9, 7, 11, 15, 5}, K = 1, X = 2
    Output: 7 13
    Since the operations has to be performed only once,
    the sorted array will be {5, 7, 9, 11, 15}
    Now, apply xor with 2 on alternate elements i.e. 5, 9 and 15.
    {5 ^ 2, 7, 9 ^ 2, 11, 15 ^ 2} which is equal to
    {7, 7, 11, 11, 13}

    Input: arr[] = {605, 986}, K = 548, X = 569
    Output: 605 986 
	
	



Alternate XOR operations on sorted array

Given an array arr[] and two integers X and K. The task is to perform the following operation on array K times:

    Sort the array.
    XOR every alternate element of the sorted array with X i.e. arr[0], arr[2], arr[4], …

After repeating the above steps K times, print the maximum and the minimum element in the modified array.

Examples:

    Input: arr[] = {9, 7, 11, 15, 5}, K = 1, X = 2
    Output: 7 13
    Since the operations has to be performed only once,
    the sorted array will be {5, 7, 9, 11, 15}
    Now, apply xor with 2 on alternate elements i.e. 5, 9 and 15.
    {5 ^ 2, 7, 9 ^ 2, 11, 15 ^ 2} which is equal to
    {7, 7, 11, 11, 13}

    Input: arr[] = {605, 986}, K = 548, X = 569
    Output: 605 986 
	



Sum of the distances from every node to all other nodes is maximum

Given a tree with N nodes and N-1 edges with root at 1 and given an array of N-1 integers. The task is to assign weights to the edges in the tree such that the sum of the distances from every node to all other nodes is maximum.

Examples:

utput: 46

Assign the edge 1-2 with weight 5
Assign the edge 2-3 with weight 7
Assign the edge 3-4 with weight 1

The distance of node 1 from the nodes 2, 3, 4 is {5, 5+7, 5+7+1}
The distance of node 2 from the nodes 3, 4 is {7, 7+1}
The distance of node 3 from the node 4 is {1}

Input:




Divide the array in K segments such that the sum of minimums is maximized

Given an array a of size N and an integer K, the task is to divide the array into K segments such that sum of the minimum of K segments is maximized.

Examples:

    Input: a[] = {5, 7, 4, 2, 8, 1, 6}, K = 3
    Output: 7
    Divide the array at indexes 0 and 1. Then the segments are {5}, {7}, {4, 2, 8, 1, 6}. Sum of the minimus is 5 + 7 + 1 = 13

    Input: a[] = {6, 5, 3, 8, 9, 10, 4, 7, 10}, K = 4
    Output: 27 
	



Partition the array in K segments such that bitwise AND of individual segment sum is maximized

Given an array of size N and an integer K. The task is to partition the array in K segments such that bitwise AND of individual segment sum is maximized. Find the maximum value of bitwise AND which can be obtained.

    Input : a[] = { 2, 5, 6, 9, 1, 3, 10, 12 }, K = 3
    Output : 8
    Explanation :
    Maximum bitwise AND can be obtained by making cut at 3rd element and 5th element(1 based indexing)
    (2+5+6)&(9+1)&(3+10+12) = 8

    Input : a[] = { 1, 2, 7, 10, 23, 21, 6, 8, 7, 3 } , K = 2
    Output : 41
    Explanation:
    Maximum bitwise AND can be obtained by making cut at 5th element(1 based indexing)
    (1+2+7+10+23)&(21+6+8+7+3) = 41
	



Longest subsequence such that every element in the subsequence is formed by multiplying previous element with a prime

Given a sorted array of N integers. The task is to find the longest subsequence such that every element in the subsequence is reachable by multiplying any prime number to the previous element in the subsequence.

Note: A[i] <= 105

Examples:

    Input: a[] = {3, 5, 6, 12, 15, 36}
    Output 4
    The longest subsequence is {3, 6, 12, 36}
    6 = 3*2
    12 = 6*2
    36 = 12*3

    2 and 3 are primes

    Input: a[] = {1, 2, 5, 6, 12, 35, 60, 385}
    Output: 5 
	


Partition an array of non-negative integers into two subsets such that average of both the subsets is equal

Given an array of size N. The task is to partition the given array into two subsets such that the average of all the elements in both subsets is equal. If no such partition exists print -1. Otherwise, print the partitions. If multiple solutions exist, print the solution where the length of the first subset is minimum. If there is still a tie then print the partitions where the first subset is lexicographically smallest.

Examples:

Input : vec[] = {1, 7, 15, 29, 11, 9}
Output : [9, 15] [1, 7, 11, 29]
Explanation : Average of the both the subsets is 12
 
Input : vec[] = {1, 2, 3, 4, 5, 6}
Output : [1, 6] [2, 3, 4, 5]. 
Explanation : Another possible solution is [3, 4] [1, 2, 5, 6], 
but print the  solution whose first subset is lexicographically 
smallest.




Cost Based Tower of Hanoi

The standard Tower of Hanoi problem is explained here . In the standard problem, all the disc transactions are considered identical. Given a 3×3 matrix costs[][] containing the costs of transfer of disc between the rods where costs[i][j] stores the cost of transferring a disc from rod i to rod j. Cost of transfer between the same rod is 0. Hence the diagonal elements of the cost matrix are all 0s. The task is to print the minimum cost in which all the N discs are transferred from rod 1 to rod 3.

Examples:

    Input: N = 2
    costs = {
    { 0, 1, 2},
    { 2, 0, 1},
    { 3, 2, 0}}
    Output: 4
    There are 2 discs, the smaller one is on the bigger one.
    Transfer the smaller disc from rod 1 to rod 2.
    Cost of this transfer is equal to 1
    Transfer the bigger disc to from rod 1 to rod 3.
    Cost of this transfer is equal to 2.
    Transfer the smaller disc to from rod 2 to rod 3.
    Cost of this transfer is equal to 1
    Total minimum cost is equal to 4.

    Input: N = 3
    costs = {
    { 0, 1, 2},
    { 2, 0, 1},
    { 3, 2, 0}}
    Output: 12 
	


Remove an element to maximize the GCD of the given array

Given an array arr[] of length N ≥ 2. The task is to remove an element from the given array such that the GCD of the array after removing it is maximized.

Examples:

    Input: arr[] = {12, 15, 18}
    Output: 6
    Remove 12: GCD(15, 18) = 3
    Remove 15: GCD(12, 18) = 6
    Remove 18: GCD(12, 15) = 3

    Input: arr[] = {14, 17, 28, 70}
    Output: 14 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.



Find minimum length sub-array which has given sub-sequence in it

Given an array arr[] of N elements, the task is to find the length of the smallest sub-array which has sequence {0, 1, 2, 3, 4} as a sub-sequence in it.

Examples:

    Input: arr[] = {0, 1, 2, 3, 4, 2, 0, 3, 4}
    Output: 5
    Required Subarray is {0, 1, 2, 3, 4} with minimum length.
    The entire array also contains the sequence
    but it is not minimum in length.

    Input: arr[] = {0, 1, 1, 0, 1, 2, 0, 3, 4}
    Output: 6 
	


Count of integers of length N and value less than K such that they contain digits only from the given set

Given a set of digits A[] in sorted order and two integers N and K, the task is to find how many numbers of length N are possible whose value is less than K and the digits are from the given set only. Note that you can use the same digit multiple times.

Examples:

    Input: A[] = {0, 1, 5}, N = 1, K = 2
    Output: 2
    Only valid numbers are 0 and 1.

    Input: A[] = {0, 1, 2, 5}, N = 2, K = 21
    Output: 5
    10, 11, 12, 15 and 20 are the valid numbers. 

Given the mobile numeric keypad. You can only press buttons that are up, left, right or down to the current button or can choose to press the same button again. Round corner buttons (i.e. * and # ) are invalid moves.

Mobile-keypad

Given a number N, You have to find the distinct numbers of length N you can dial by starting from any number from 0-9, under the constraint that you can only move up, left, right or down from the last number you pressed, or you can choose to press the same button again.

Examples:

    Input: N = 1
    Output: 10
    0, 1, 2, 3, 4, 5, 6, 7, 8 and 9 are the possible numbers.

    Input: N = 2
    Output: 36
    All the possible numbers are 00, 08, 11, 12, 14, 21, 22, 23, 25, …

    Input: N = 6
    Output: 7990 
	


Longest Consecuetive Subsequence when only one insert operation is allowed

Given a sequence of positive integers of length N. The only operation allowed is to insert a single integer of any value at any position in the sequence. The task is to find the sub-sequence of maximum length that contains consecutive values in increasing order.

Examples:

    Input: arr[] = {2, 1, 4, 5}
    Output: 4
    Insert element with value 3 at the 3rd position.(1 based indexing)
    The new sequence becomes {2, 1, 3, 4, 5}
    Longest consecutive sub-sequence would be {2, 3, 4, 5}

    Input: arr[] = {2, 1, 2, 3, 5, 7}
    Output: 5 


Minimum time required to rot all oranges | Dynamic Programming

Given a matrix of dimension m * n where each cell in the matrix can have values 0, 1 or 2 which has the following meaning:

0: Empty cell

1: Cells have fresh oranges

2: Cells have rotten oranges

So the task is to determine what is the minimum time required so that all the oranges become rotten. A rotten orange at index [i, j] can rot other fresh oranges at indexes [i – 1, j], [i + 1, j], [i, j – 1], [i, j + 1] (up, down, left and right). If it is impossible to rot every orange then simply return -1.

Examples:

    Input: arr[][] = {
    {2, 1, 0, 2, 1},
    {1, 0, 1, 2, 1},
    {1, 0, 0, 2, 1}};
    Output: 2
    In the first unit of time, all the oranges will be rotten
    except the first orange of the last row
    which will get rotten in the second unit of time.

    Input: arr[][] =
    {{2, 1, 0, 2, 1},
    {0, 0, 1, 2, 1},
    {1, 0, 0, 2, 1}};
    Output: -1 
	
	

Coin Change | BFS Approach

Given an integer X and an array arr[] of length N consisting of positive integers, the task is to pick minimum number of integers from the array such that they sum up to N. Any number can be chosen infinite number of times. If no answer exists then print -1.

Examples:

    Input: X = 7, arr[] = {3, 5, 4}
    Output: 2
    The minimum number elements will be 2 as
    3 and 4 can be selected to reach 7.

    Input: X = 4, arr[] = {5}
    Output: -1 
	
	

Flip minimum signs of array elements to get minimum sum of positive elements possible

Given an array of positive elements, you have to flip the sign of some of its elements such that the resultant sum of the elements of array should be minimum non-negative (as close to zero as possible). Return the minimum no. of elements whose sign needs to be flipped such that the resultant sum is minimum non-negative. Note that the sum of all the array elements will not exceed 104.

Examples:

    Input: arr[] = {15, 10, 6}
    Output: 1
    Here, we will flip the sign of 15
    and the resultant sum will be 1.

    Input: arr[] = [14, 10, 4]
    Output: 1
    Here, we will flip the sign of 14 and the resultant sum will be 0.
    Note that flipping the signs of 10 and 4 also gives
    the resultant sum 0 but the count of flipped elements is not minimum. 


Maximum sub-sequence sum such that indices of any two adjacent elements differs at least by 3

Given an array arr[] of integers, the task is to find the maximum sum of any sub-sequence in the array such that any two adjacent elements in the selected sequence have at least a difference of 3 in their indices in the given array.
In other words, if you select arr[i] then the next element you can select is arr[i + 3], arr[i + 4], and so on… but you cannot select arr[i + 1] and arr[i + 2].

Examples:

    Input: arr[] = {1, 2, -2, 4, 3}
    Output: 5
    {1, 4} and {2, 3} are the only sub-sequences
    with maximum sum.

    Input: arr[] = {1, 2, 72, 4, 3, 9}
    Output: 8
	
	

Minimum count of elements that sums to a given number

Given infinte number of elements of form 10^n and 25*100^n ( n >= 0 ). The task is to find the minimum count of elements chosen such that there sum is equal to K.

Examples:

    Input : K = 48
    Output : 6
    elements chosen are: (1 + 1 + 1 + 10 + 10 + 25)

    Input : 69
    Output : 9
    elements chosen are: (1 + 1 + 1 + 1 + 10 + 10 + 10 + 10 + 25) 
	
	

Number of ways to get a given sum with n number of m-faced dices

Given n dices each with m faces, numbered from 1 to m, find the number of ways to get a given sum X. X is the summation of values on each face when all the dice are thrown.

Examples:

    Input : faces = 4 throws = 2 sum =4
    Output : 3
    Ways to reach sum equal to 4 in 2 throws can be { (1, 3), (2, 2), (3, 1) }

    Input : faces = 6 throws = 3 sum = 12
    Output : 25



Total number of odd length palindrome sub-sequence around each centre

Given a string str, the task is to find the number of odd length palindromic sub-sequences around of str with str[i] as centre i.e. every index will be considered as the centre one by one.

Examples:

    Input: str = “xyzx”
    Output: 1 2 2 1
    For index 0: There is only a single sub-sequence possible i.e. “x”
    For index 1: Two sub-sequences are possible i.e. “y” and “xyx”
    For index 2: “z” and “xzx”
    For index 3: “x”

    Input: str = “aaaa”
    Output: 1 3 3 1 
	


Number of sub-sequence such that it has one consecutive element with difference less than or equal to 1

Given an array arr[] of N elements. The task is to find the number of sub-sequences which have at least two consecutive elements such that absolute difference between them is ≤ 1.

Examples:

    Input: arr[] = {1, 6, 2, 1}
    Output: 6
    {1, 2}, {1, 2, 1}, {2, 1}, {6, 2, 1}, {1, 1} and {1, 6, 2, 1}
    are the sub-sequences that have at least one consecutive pair
    with difference less than or equal to 1.

    Input: arr[] = {1, 6, 2, 1, 9}
    Output: 12 
	

Iterative approach to print all permutations of an Array

Given an array arr[] of size N, the task is to generate and print all permutations of the given array.

Examples:

    Input: arr[] = {1, 2}
    Output:
    1 2
    2 1

    Input: {0, 1, 2}
    Output:
    0 1 2
    1 0 2
    0 2 1
    2 0 1
    1 2 0
    2 1 0 


Maximum sum of non-overlapping subarrays of length atmost K

Given an integer array ‘arr’ of length N and an integer ‘k’, select some non-overlapping subarrays such that each sub-array if of length at most ‘k’, no two sub-arrays are adjacent and sum of all the elements of the selected sub-arrays are maximum.

Examples:

Input : arr[] = {-1, 2, -3, 4, 5}, k = 2
Output : 11
Sub-arrays that maximizes sum will be {{2}, {4, 5}}.
Thus, the answer will be 2+4+5 = 11.

Input :arr[] = {1, 1, 1, 1, 1}, k = 1
Output : 3



Iterative approach to print all combinations of an Array

Given an array arr[] of size N, the task is to generate and print all possible combinations of R elements in array.

Examples:

    Input: arr[] = {0, 1, 2, 3}, R = 3
    Output:
    0 1 2
    0 1 3
    0 2 3
    1 2 3

    Input: arr[] = {1, 3, 4, 5, 6, 7}, R = 5
    Output:
    1 3 4 5 6
    1 3 4 5 7
    1 3 4 6 7
    1 3 5 6 7
    1 4 5 6 7
    3 4 5 6 7 
	


Longest sub-sequence that satisfies the given conditions

Given an array arr[] of N integers, the task is to find the longest sub-sequence in the given array such that for all pairs from the sub-sequence (arr[i], arr[j]) where i != j either arr[i] divides arr[j] or vice versa. If no such sub-sequence exists then print -1.

Examples:

    Input: arr[] = {2, 4, 6, 1, 3, 11}
    Output: 3
    Longest valid sub-sequences are {1, 2, 6} and {1, 3, 6}.

    Input: arr[] = {21, 22, 6, 4, 13, 7, 332}
    Output: 2 
	


Maximum subset sum such that no two elements in set have same digit in them

Given an array of N elements. Find the subset of elements which has maximum sum such that no two elements in the subset has common digit present in them.

Examples:

    Input : array[] = {22, 132, 4, 45, 12, 223}
    Output : 268
    Maximum Sum Subset will be = {45, 223} .
    All possible digits are present except 1.
    But to include 1 either 2 or both 2 and 3 have
    to be removed which result in smaller sum value.

    Input : array[] = {1, 21, 32, 4, 5 }
    Output : 42 
	


Number of ways to choose elements from the array such that their average is K

Given an array arr[] of N integers and an integer K. The task is to find the number of ways to select one or more elements from the array such that the average of the selected integers is equal to given number K.

Examples:

    Input: arr[] = {7, 9, 8, 9}, K = 8
    Output: 5
    {8}, {7, 9}, {7, 9}, {7, 8, 9} and {7, 8, 9}

    Input: arr[] = {3, 6, 2, 8, 7, 6, 5, 9}, K = 5
    Output: 19

    Input: arr[] = {6, 6, 9}, K = 8
    Output: 0 
	



Probability of getting more heads than tails when N biased coins are tossed

Given an array p[] of odd length N where p[i] denotes the probability of getting a head on the ith coin. As the coins are biased, the probability of getting a head is not always equal to 0.5. The task is to find the probability of getting heads more number of times than tails.

Examples:

    Input: p[] = {0.3, 0.4, 0.7}
    Output: 0.442
    Probability for a tail = (1 – Probability for a head)
    For heads greater than tails, there are 4 possibilities:
    P({head, head, tail}) = 0.3 x 0.4 x (1 – 0.7) = 0.036
    P({tail, head, head}) = (1 – 0.3) x 0.4 x 0.7 = 0.196
    P({head, tail, head}) = 0.3 x (1 – 0.4) x 0.7= 0.126
    P({head, head, head}) = 0.3 x 0.4 x 0.7 = 0.084
    Adding the above probabilities
    0.036 + 0.196 + 0.126 + 0.084 = 0.442

    Input: p[] = {0.3, 0.5, 0.2, 0.6, 0.9}
    Output: 0.495 
	


Maximize the happiness of the groups on the Trip

A trip to mystical land is going to be organized in ByteLand, the city of Bytes. Unfortunately, there are limited seats say A and there are N number of groups of people. Every group can have old person o, child c, man m and woman w. The organizing committee wants to maximize the happiness value of the trip. Happiness value of the trip is the sum of the happiness value of all the groups that are going. A group will go for the trip if every member can get a seat (Breaking a group is not a good thing).

    The happiness of child c = 4
    The happiness of woman w = 3
    The happiness of man m = 2
    The happiness of the old person o = 1

The happiness of group G, H(G) = (sum of happiness of people in it) * (number of people in the group).
The happiness of the group (‘coow’) = (4 + 1 + 1 + 3) * 4 = 36.

Given the groups and the total seating capacity, the task is to maximize the happiness and print the maximized happiness of the groups going on the trip.

Examples:

    Input: groups[] = {“mmo”, “oo”, “cmw”, “cc”, “c”}, A = 5
    Output: 43
    Pick these groups [‘cmw’, ‘cc’] to get the maximum profit of (4 + 2 + 3) * 3 + (4 + 4) * 2 = 43

    Input: groups[] = {“ccc”, “oo”, “cm”, “mm”, “wwo”}, A = 10
    Output: 77 
	
	

Maximum items that can be filled in K Knapsacks of given Capacity

Given an integer array W[] consisting of weights of items and ‘K’ knapsacks of capacity ‘C’, find maximum weight we can put in the knapsacks if breaking of an item is not allowed.

Examples:

    Input : w[] = {3, 9, 8}, k = 1, c = 11
    Output : 11
    The required subset will be {3, 8}
    where 3+8 = 11

    Input : w[] = {3, 9, 8}, k = 1, c = 10
    Output : 9 
	


0-1 knapsack queries

Given an integer array W[] consisting of weights of the items and some queries consisting of capacity C of knapsack, for each query find maximum weight we can put in the knapsack. Value of C does’t exceed a certain integer C_MAX.

Examples:

    Input: W[] = {3, 8, 9} q = {11, 10, 4}
    Output:
    11
    9
    3
    If C = 11: select 3 + 8 = 11
    If C = 10: select 9
    If C = 4: select 3

    Input: W[] = {1, 5, 10} q = {6, 14}
    Output:
    6
    11 
	


Minimize the sum after choosing elements from the given three arrays

Given three arrays A[], B[] and C[] of same size N. The task is to minimize the sum after choosing N elements from these array such that at every index i an element from any one of the array A[i], B[i] or C[i] can be chosen and no two consecutive elements can be chosen from the same array.

Examples:

    Input: A[] = {1, 100, 1}, B[] = {100, 100, 100}, C[] = {100, 100, 100}
    Output: 102
    A[0] + B[1] + A[2] = 1 + 100 + 100 = 201
    A[0] + B[1] + C[2] = 1 + 100 + 100 = 201
    A[0] + C[1] + B[2] = 1 + 100 + 100 = 201
    A[0] + C[1] + A[2] = 1 + 100 + 1 = 102
    B[0] + A[1] + B[2] = 100 + 100 + 100 = 300
    B[0] + A[1] + C[2] = 100 + 100 + 100 = 300
    B[0] + C[1] + A[2] = 100 + 100 + 1 = 201
    B[0] + C[1] + B[2] = 100 + 100 + 100 = 300
    C[0] + A[1] + B[2] = 100 + 100 + 100 = 300
    C[0] + A[1] + C[2] = 100 + 100 + 100 = 300
    C[0] + B[1] + A[2] = 100 + 100 + 1 = 201
    C[0] + B[1] + C[2] = 100 + 100 + 100 = 300

    Input: A[] = {1, 1, 1}, B[] = {1, 1, 1}, C[] = {1, 1, 1}
    Output: 3 
	
	

Maximise array sum after taking non-overlapping sub-arrays of length K

Given an integer array arr[] of length N and an integer K, the task is to select some non-overlapping sub-arrays such that each sub-array is exactly of length K, no two sub-arrays are adjacent and sum of all the elements of the selected sub-arrays is maximum.

Examples:

    Input: arr[] = {1, 2, 3, 4, 5}, K = 2
    Output: 12
    Sub-arrays that maximizes sum will be {{1, 2}, {4, 5}}.
    Thus, the answer will be 12.

    Input: arr[] = {1, 1, 1, 1, 1}, K = 1
    Output: 3 
	



Find maximum path sum in a 2D matrix when exactly two left moves are allowed


Given a 2D matrix arr[][] of dimensions N * M where N is number of rows and M is number of columns.The task is to find maximum path sum in this matrix satisfying some condition which are as follows :

    We can only start with arr[i][M] where 0 <= i <= N.
    We end the path on the same side, such that we can take exactly 2 left turns.
	
nput : N = 3, M = 3
        arr[][] = {{1, 2, 3},
                   {3, 3, 1},
                   {4, 1, 6}}
Output : 20
Explanation : 
If we follow this path then we get the sum 20.

Input : N = 3, M = 3
        arr[][] = {{3, 7, 4},
                   {1, 9, 6},
                   {1, 7, 7}}
Output : 34
Explanation : 
If we follow this path then we get the sum 34.




	


